language: generic

services:
  - docker

notifications:
  email:
    on_success: never
    on_failure: change

cache:
  directories:
    - $HOME/.composer/cache
    - $HOME/.jest-cache
    - $HOME/.npm
    - $HOME/.nvm/.cache

branches:
  only:
    - master
    - rnmobile/master
    - /rnmobile\/release.*/
    - /wp\/.*/
    - feat/import-gutenberg-mobile-no-squash

env:
  global:
    - WP_DEVELOP_DIR: ./wordpress
    - LOCAL_SCRIPT_DEBUG: false
    - INSTALL_WORDPRESS: true

# Make sure NodeGit gets the correct C libs.
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - libstdc++-4.9-dev

before_install:
  - nvm install --latest-npm
  - |
    if [[ "$INSTALL_WORDPRESS" = "true" ]]; then
      # Upgrade docker-compose.
      sudo rm /usr/local/bin/docker-compose
      curl -sL https://github.com/docker/compose/releases/download/1.24.0/docker-compose-`uname -s`-`uname -m` > docker-compose
      chmod +x docker-compose
      sudo mv docker-compose /usr/local/bin
    fi

install:
  # Build Gutenberg.
  - npm ci
  - npm run build
  - |
    if [[ "$INSTALL_WORDPRESS" = "true" ]]; then
      # Download and unpack WordPress.
      curl -sL https://github.com/WordPress/WordPress/archive/master.zip -o /tmp/wordpress-latest.zip
      unzip -q /tmp/wordpress-latest.zip -d /tmp
      mkdir -p wordpress/src
      mv /tmp/WordPress-master/* wordpress/src

      # Create the upload directory with permissions that Travis can handle.
      mkdir -p wordpress/src/wp-content/uploads
      chmod 767 wordpress/src/wp-content/uploads

      # Grab the tools we need for WordPress' local-env.
      curl -sL https://github.com/WordPress/wordpress-develop/archive/master.zip -o /tmp/wordpress-develop.zip
      unzip -q /tmp/wordpress-develop.zip -d /tmp
      mv \
        /tmp/wordpress-develop-master/tools \
        /tmp/wordpress-develop-master/tests \
        /tmp/wordpress-develop-master/.env \
        /tmp/wordpress-develop-master/docker-compose.yml \
        /tmp/wordpress-develop-master/wp-cli.yml \
        /tmp/wordpress-develop-master/*config-sample.php \
        /tmp/wordpress-develop-master/package.json wordpress

      # Install WordPress. The additional dependencies are required by the copied `wordpress-develop` tools.
      cd wordpress
      npm install dotenv wait-on
      npm run env:start
      sleep 10
      npm run env:install
      cd ..

      # Connect Gutenberg to WordPress.
      npm run env connect
      npm run env cli plugin activate gutenberg
    fi
  - |
    if [[ "$E2E_ROLE" = "author" ]]; then
      npm run env cli -- user create author author@example.com --role=author --user_pass=authpass
      npm run env cli -- post update 1 --post_author=2
    fi

jobs:
  include:
    - name: Lint
      install:
        - npm ci
      script:
        - npm run lint

    - name: Lint ES5 only
      install:
        - npm ci
        - npm run build
      script:
        - npx eslint --parser-options=ecmaVersion:5 --no-eslintrc --no-ignore ./build/**/*.js

    - name: Typecheck
      install:
        - npm ci
      script:
        - npm run build:package-types


    - name: Build artifacts
      install:
        # A "full" install is executed, since `npm ci` does not always exit
        # with an error status code if the lock file is inaccurate.
        #
        # See: https://github.com/WordPress/gutenberg/issues/16157
        - npm install
      script:
        - npm run check-local-changes

    - name: License compatibility
      install:
        - npm ci
      script:
        - npm run check-licenses

    - name: JavaScript unit tests
      env: INSTALL_WORDPRESS=false
      install:
        - npm ci
        # It's not necessary to run the full build, since Jest can interpret
        # source files with `babel-jest`. Some packages have their own custom
        # build tasks, however. These must be run.
        - npx lerna run build
      script:
        - npm run test-unit -- --ci --maxWorkers=2 --cacheDirectory="$HOME/.jest-cache"

    - name: JavaScript native mobile tests
      install:
        - npm ci
        # It's not necessary to run the full build, since Jest can interpret
        # source files with `babel-jest`. Some packages have their own custom
        # build tasks, however. These must be run.
        - npx lerna run build
      script:
        - npm run test-unit:native -- --ci --maxWorkers=2 --cacheDirectory="$HOME/.jest-cache"

    - name: PHP unit tests
      script:
        - npm run test-php && npm run test-unit-php-multisite

    - name: PHP unit tests (PHP 5.6)
      env: LOCAL_PHP=5.6-fpm
      script:
        - npm run test-php && npm run test-unit-php-multisite

    - name: E2E tests (Admin) (1/4)
      env: FORCE_REDUCED_MOTION=true
      script:
        - $( npm bin )/wp-scripts test-e2e --config=./packages/e2e-tests/jest.config.js --listTests > ~/.jest-e2e-tests
        - $( npm bin )/wp-scripts test-e2e --config=./packages/e2e-tests/jest.config.js --cacheDirectory="$HOME/.jest-cache" --runTestsByPath $( awk 'NR % 4 == 0' < ~/.jest-e2e-tests )

    - name: E2E tests (Admin) (2/4)
      env: FORCE_REDUCED_MOTION=true
      script:
        - $( npm bin )/wp-scripts test-e2e --config=./packages/e2e-tests/jest.config.js --listTests > ~/.jest-e2e-tests
        - $( npm bin )/wp-scripts test-e2e --config=./packages/e2e-tests/jest.config.js --cacheDirectory="$HOME/.jest-cache" --runTestsByPath $( awk 'NR % 4 == 1' < ~/.jest-e2e-tests )

    - name: E2E tests (Admin) (3/4)
      env: FORCE_REDUCED_MOTION=true
      script:
        - $( npm bin )/wp-scripts test-e2e --config=./packages/e2e-tests/jest.config.js --listTests > ~/.jest-e2e-tests
        - $( npm bin )/wp-scripts test-e2e --config=./packages/e2e-tests/jest.config.js --cacheDirectory="$HOME/.jest-cache" --runTestsByPath $( awk 'NR % 4 == 2' < ~/.jest-e2e-tests )

    - name: E2E tests (Admin) (4/4)
      env: FORCE_REDUCED_MOTION=true
      script:
        - $( npm bin )/wp-scripts test-e2e --config=./packages/e2e-tests/jest.config.js --listTests > ~/.jest-e2e-tests
        - $( npm bin )/wp-scripts test-e2e --config=./packages/e2e-tests/jest.config.js --cacheDirectory="$HOME/.jest-cache" --runTestsByPath $( awk 'NR % 4 == 3' < ~/.jest-e2e-tests )

    - name: E2E tests (Author) (1/4)
      env: E2E_ROLE=author FORCE_REDUCED_MOTION=true
      script:
        - $( npm bin )/wp-scripts test-e2e --config=./packages/e2e-tests/jest.config.js --listTests > ~/.jest-e2e-tests
        - $( npm bin )/wp-scripts test-e2e --config=./packages/e2e-tests/jest.config.js --cacheDirectory="$HOME/.jest-cache" --runTestsByPath $( awk 'NR % 4 == 0' < ~/.jest-e2e-tests )

    - name: E2E tests (Author) (2/4)
      env: E2E_ROLE=author FORCE_REDUCED_MOTION=true
      script:
        - $( npm bin )/wp-scripts test-e2e --config=./packages/e2e-tests/jest.config.js --listTests > ~/.jest-e2e-tests
        - $( npm bin )/wp-scripts test-e2e --config=./packages/e2e-tests/jest.config.js --cacheDirectory="$HOME/.jest-cache" --runTestsByPath $( awk 'NR % 4 == 1' < ~/.jest-e2e-tests )

    - name: E2E tests (Author) (3/4)
      env: E2E_ROLE=author FORCE_REDUCED_MOTION=true
      script:
        - $( npm bin )/wp-scripts test-e2e --config=./packages/e2e-tests/jest.config.js --listTests > ~/.jest-e2e-tests
        - $( npm bin )/wp-scripts test-e2e --config=./packages/e2e-tests/jest.config.js --cacheDirectory="$HOME/.jest-cache" --runTestsByPath $( awk 'NR % 4 == 2' < ~/.jest-e2e-tests )

    - name: E2E tests (Author) (4/4)
      env: E2E_ROLE=author FORCE_REDUCED_MOTION=true
      script:
        - $( npm bin )/wp-scripts test-e2e --config=./packages/e2e-tests/jest.config.js --listTests > ~/.jest-e2e-tests
        - $( npm bin )/wp-scripts test-e2e --config=./packages/e2e-tests/jest.config.js --cacheDirectory="$HOME/.jest-cache" --runTestsByPath $( awk 'NR % 4 == 3' < ~/.jest-e2e-tests )

    - name: E2E Mobile tests (Android)
      language: bash
      # bionic is required for nested virtualization on linux platforms
      dist: bionic
      sudo: true
      # overwrite addons
      addons:
        apt:
          packages: []
      env:
        - TEST_RN_PLATFORM=android
        - TEST_ENV=local
        - JEST_JUNIT_OUTPUT="reports/test-results/android-test-results.xml"
        - ANDROID_TOOLS_URL="https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip"
        - ANDROID_HOME=${HOME}/android-sdk
        - PATH=${ANDROID_HOME}:${ANDROID_HOME}/emulator:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools:${PATH}
        - GRAVIS="https://raw.githubusercontent.com/DanySK/Gravis-CI/master/"
        - ANDROID_COMPILE_API=28
        - ANDROID_BUILD_TOOLS_VERSION=28.0.3
        - ADB_INSTALL_TIMEOUT=20 # minutes (2 minutes by default)
        # these can be overridden in a build matrix if we wanted to test multiple builds
        - ANDROID_API=29
        - ANDROID_AUDIO=-no-audio
        - ANDROID_ABI=x86_64 # or armeabi-v7a
        - ANDROID_EMU_FLAVOR=google_apis # or default
      before_install:
        - java -version

        # Set up KVM on linux for hardware acceleration
        - sudo -E apt-get -yq --no-install-suggests --no-install-recommends install bridge-utils libpulse0 libvirt-bin libxcursor1 qemu-kvm virtinst ubuntu-vm-builder
        - sudo adduser $USER libvirt
        - sudo adduser $USER kvm

        # Set up JDK 8 for Android SDK
        - curl "${GRAVIS}.install-jdk-travis.sh" --output ~/.install-jdk-travis.sh
        - export TARGET_JDK="${JDK}"
        - JDK="1.8"
        - source ~/.install-jdk-travis.sh

        # Install Android SDK
        - wget -q "${ANDROID_TOOLS_URL}" -O android-sdk-tools.zip
        - unzip -q android-sdk-tools.zip -d ${ANDROID_HOME}
        - rm android-sdk-tools.zip

        # Avoid harmless sdkmanager warning
        - mkdir ~/.android
        - echo 'count=0' > ~/.android/repositories.cfg

        # Accept licenses before installing components, no need to echo y for each component
        - yes | sdkmanager --licenses >/dev/null

        # Download SDK tools
        - yes | sdkmanager "platform-tools" >/dev/null
        - yes | sdkmanager "tools" >/dev/null # A second time per Travis docs, gets latest versions
        - yes | sdkmanager "build-tools;$ANDROID_BUILD_TOOLS_VERSION" >/dev/null # Implicit gradle dependency - gradle drives changes
        - yes | sdkmanager "platforms;android-$ANDROID_COMPILE_API" >/dev/null # We need the API of the current compileSdkVersion from gradle.properties
        - sdkmanager --list | head -15
        - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
        - nvm install
        - echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
      install:
        # Download required emulator tools
        - yes | sdkmanager "platforms;android-$ANDROID_API" >/dev/null # We need the API of the emulator we will run
        - yes | sdkmanager "emulator" >/dev/null
        - yes | sdkmanager "system-images;android-$ANDROID_API;$ANDROID_EMU_FLAVOR;$ANDROID_ABI" >/dev/null # install our emulator

        # Create an Android emulator
        - echo no | avdmanager create avd --force --name test -k "system-images;android-$ANDROID_API;$ANDROID_EMU_FLAVOR;$ANDROID_ABI" -c 10M
        #- printf "\nhw.lcd.height=2160\nhw.lcd.width=1080\nhw.lcd.density=320\nskin.name=1080x2160" >> /home/travis/.android/avd/test.avd/config.ini
        - |
          EMU_PARAMS="-verbose -no-snapshot -no-window -camera-back none -camera-front none -selinux permissive -qemu -m 2048"
          EMU_COMMAND="emulator"
          # This double "sudo" monstrosity is used to have Travis execute the
          # emulator with its new group permissions and help preserve the rule
          # of least privilege.
          sudo -E sudo -u $USER -E bash -c "${ANDROID_HOME}/emulator/${EMU_COMMAND} -avd test ${ANDROID_AUDIO} ${EMU_PARAMS} &"

        # Build the app (while the emulator is starting)
        - npm ci --no-progress
        - npm run native test:e2e:build-app:android
      before_script:
        # Wait for emulator to be ready
        - chmod +x ./packages/react-native-editor/bin/android-wait-for-emulator.sh
        - ./packages/react-native-editor/bin/android-wait-for-emulator.sh
        - adb shell input keyevent 82 &
      script:
        - npm run native test:e2e:install-app:android
        - npm run native device-tests:local
      before_cache:
        - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock
        - rm -r -f node_modules/
        - curl "${GRAVIS}.clean_gradle_cache.sh" --output ~/.clean_gradle_cache.sh
        - bash ~/.clean_gradle_cache.sh > /dev/null
      cache:
        directories:
          - $ANDROID_HOME
          - $HOME/.npm
          - $HOME/.gradle/caches/
          - $HOME/.gradle/wrapper/
          - node_modules/

  allow_failures:
    - name: E2E Mobile tests (Android)
